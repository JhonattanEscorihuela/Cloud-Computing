• BD relacionales : Los datos están organizados en un conjunto de tablas que están relacionados entre si
	○ MYSQL
	○ Oracle
	○ OsgraSQL
	○ MariaSB
	○ SQL server

	○ Por ejemplo una tabla de usuarios que esté relacionada con otra tabla que contenga la cantidad de tarjetas que tenga registrada en un servicio
		§ 

• BD Clave/valor  Key/Value
	Utiliza un modelo de llave - valor para almacenar los datos. Los almacena como un conjunto  de pares. 
	○ Es una base de datos NO relacional
	○ 
	
	○ Se usa comúnmente como tabla de transacciones

• BD en memoria
	○ Utiliza la memoria para almacenar los datos , es de naturaleza NO relacional
	○ Se usa mucho para que la agilidad o velocidad de lectura de datos sea mucho más rápida que cuando está en un disco duro

• BD documentales
	○ Mongo es la más famosa
	○ Se usa para guardar JSON (Java Script Objet notation (fundamentado en texto, y es muy liviano. Se usa, sobre todo, para transmitir datos entre un servidor y una aplicación web )) de información muy grandes 

• BD columnaer
	○ Es relacional y está optimizada para almacenar los datos en columnas para mejorar el desempeño
	○ Se usa para data warehousing (Los data warehouses pueden: Almacenar grandes cantidades de datos en una base de datos central – y en un formato estándar. Integrar datos de diferentes fuentes y estandarizarlos, de modo que se faciliten el análisis y los reportes. )
	○ Separa cada columna por aparte 
	○ Aplica compresión en las columnas para que sea más eficiente
• BD Grafos
	○ Representa la información en forma de vértices y aristas 
	○ Sirve para identificar relaciones fuertes y conocer quien más usuario y que tipo de red de contactos cercanos usan o tienen alguna app o servicio
		§ 
	○ Sirve para hacer timestamps para saber cuándo cambió el valor de un objeto
	○ Sirve para hacer monitoreos a través del tiempo - PROMETEUS es una de las BD más conocidas de la nube

-Infraestructura como código: Permite gestionar y desplegar la infraestructura en un proveedor de servicios de nube a través de código, en vez de hacerlo con procesos manuales.

-Función: Es un entorno de ejecución serverless para ejecutar código sin la necesidad de administrar un servidor.

**-Contenedor Docker: ** Contenedor ejecutable, independiente que tiene todo lo necesario para ejecutar una aplicación.

-Microservicio: Un concepto en el cual una aplicación se construye como una serie de pequeños servicios.

On-premises se refiere a la ubicación física de recursos informáticos, como servidores, sistemas de almacenamiento y redes, que se encuentran y operan dentro de las instalaciones de una organización. En otras palabras, cuando una empresa o entidad tiene una infraestructura informática “on-premises”, significa que todos sus recursos y sistemas de TI están alojados en su propio entorno físico, como sus oficinas, centros de datos privados o instalaciones locales.

En contraste, la nube y los servicios en la nube ofrecen alternativas en las que las organizaciones pueden aprovechar recursos informáticos a través de proveedores de servicios en la nube, como Amazon Web Services (AWS), Microsoft Azure o Google Cloud Platform. Estos proveedores ofrecen servicios que permiten a las organizaciones alquilar recursos informáticos de manera flexible y escalable, sin la necesidad de gestionar la infraestructura física.

Enlace 1 : https://cloud.google.com/learn/what-is-cloud-computing?hl=es-419

Enlace 2: https://azure.microsoft.com/es-es/resources/cloud-computing-dictionary/what-is-the-cloud

Enlace 3: https://aws.amazon.com/es/what-is-cloud-computing/

Definición de CLOUD COMPUTING (NUBE): es la entrega POR DEMANDA de infraestructura y todo tipo de servicios de aplicación vía internet. Con precios por demanda, donde solo se paga por lo que se consume.
INFRAESTRUCTURA: servidores, almacenamiento, base de datos, servicio de contenedores, de funciones, etc.
COSTOS: en ON-PREMISES (costo de energía, aire acondicionado, sistemas contra incendio, internet, hardware, depreciación del hardware, etc ). En la NUBE (a través de internet le pedimos un servidor a un CLOUD PROVIDER y nos olvidamos del cálculo de los costos. El CLOUD PROVIDER te va a cobrar por segundo de uso).
Servicios de la NUBE:

ALMACENAMIENTO (Me lo da la NUBE por demanda. Por bloque o por archivo o por objeto).

SERVIDORES (en 5 minutos tenemos el servidor requerido).

APLICACIONES (el cloud provider me puede dar aplicaciones que puede consumir por demanda. Ej: reconocimiento facial).

BASES DE DATOS (Elegimos los tipos de DB que necesitemos y nos cobran por el uso. Por ejemplo, consumimos 3 DB: en memoria, relacional y llave valor).

MODELO: Pago por uso (Pay as you go. Se calcula multiplicando la cantidad de minutos consumidos referidos a horas, por el precio por hora de uso). No tiene en cuenta muchos costos fijos que tiene el ON-PREMISES para empezar a operar (comprar un servidor, el cableado, el storage, el licenciamiento de la base de datos, etc).

Agilidad: La capacidad de escalar y desplegar recursos rápidamente según la demanda, lo que agiliza el desarrollo y la entrega de aplicaciones y servicios.

Ahorro de costos: Reducción de los gastos de inversión en infraestructura y mantenimiento, además de pagar solo por lo que se utiliza, lo que optimiza los costos operativos.

Elasticidad: La habilidad de aumentar o disminuir los recursos de manera automática para adaptarse a picos de carga o cambios en la demanda, asegurando un rendimiento óptimo.

Innovación: Al eliminar la preocupación por la gestión de infraestructura, los equipos pueden centrarse en la creación y mejora constante de aplicaciones y servicios innovadores.

Despliegue global en minutos: La posibilidad de implementar aplicaciones y recursos en múltiples regiones del mundo de manera rápida y sencilla.

Catálogo de servicios: Acceso a una amplia variedad de servicios preconfigurados, como bases de datos, análisis y machine learning, lo que acelera el desarrollo y ahorra tiempo.

1. Modelo de costos (CAPEX a OPEX): Cambio del gasto de capital (CAPEX) tradicional en infraestructura a gastos operativos (OPEX) variables según el uso, lo que permite una mayor flexibilidad financiera.
2. Modelo de entrega/despliegue (Automatización y creación de ambientes): Automatización de la implementación y creación de ambientes a través de código, lo que agiliza la configuración y gestión de recursos.
3. Patrones nativos de nube: Diseño de aplicaciones específicamente para aprovechar las características únicas de la nube, como escalabilidad horizontal y alta disponibilidad.
4. Escalabilidad y resiliencia: Capacidad de aumentar dinámicamente los recursos y diseñar sistemas para resistir fallas y mantener la disponibilidad en diferentes zonas y regiones.
5. Tecnologías disruptivas: Integración de tecnologías disruptivas como Inteligencia Artificial (IA), análisis de datos, robótica, satélites y automatización para innovar en soluciones.
6. Modelo de seguridad compartida: Distribución de la responsabilidad de la seguridad entre el proveedor de servicios en la nube y el usuario, asegurando una implementación segura y cumplimiento normativo.

Infraestructura Global: Red de centros de datos y recursos de TI en todo el mundo para brindar servicios en la nube.

Regiones: Áreas geográficas con centros de datos, permiten a los usuarios elegir ubicaciones para sus datos y cargas de trabajo.

Zonas de disponibilidad(AZ): Divisiones dentro de una región con infraestructura aislada, brindan resiliencia y alta disponibilidad al permitir la conmutación automática en caso de falla.

Esta estructura global, regiones y zonas, permite a las organizaciones elegir ubicaciones estratégicas y precios, garantizando la disponibilidad y confiabilidad de los servicios en la nube, incluso en situaciones adversas.

Enlace 1: https://pages.awscloud.com/rs/112-TZM-766/images/Enter_the_Purpose-Built-Database-Era.pdf

NUBE PRIVADA: solamente puede ser accedida por nosotros como empresa. Se puede pensar como un ON-PREMISE. Con nuestro datacenter, servidores, almacenamiento e infraestructura. Para instalar APP y DB, usar el STORAGE, etc. La empresa es la única que tiene acceso a esa nube.
NUBE PÚBLICA (AWS, AZURE, GCP, etc): donde múltiples empresas tienen acceso. Son los CLOUD PROVIDERS del mercado.
NUBE HÍBRIDA: sistema o aplicación que funciona con una nube pública coexistiendo con otra privada. Ej: PlatziWallet la desplegamos en AWS sin embargo la aplicación todavía tiene una DB que no hemos migrado hacia la nube.
MULTI NUBE: cuando coexisten 2 nubes públicas. Ej: PlatziWallet la tenemos desplegada en AWS, sin embargo toda la parte de autenticación de usuarios la tenemos en un AZURE en un servicio de directorio activo. Necesitamos conectividad entre AWS y AZURE para hacer la autenticación de usuarios.
MULTI NUBE HÍBRIDA: 2 nubes públicas + 1 nube privada. Ej: PlatziWallet corre en AWS, pero tenemos la parte de procesamiento de datos y analítica en GCP. Todos los eventos que genera PlatziWallet los enviamos a GCP. Pero la APP tiene que consumir una DB que está en on-premise en una nube privada.

Cloud Native Computing Foundation
https://www.cncf.io/

Graduated and Incubating Projects | Cloud Native Computing Foundation
https://www.cncf.io/projects/

Características Arquitectura:
Altamente disponible (AZ): 2 zonas de disponibilidad.

CAPA DE CONECTIVIDAD: para el on-premises, las instalaciones de la empresa o una capa de networking. A través de un VPN o una conexión dedicada que nos ofrece Cloud P.
ZONA PRIVADA: donde corre el backend de nuestra aplicación. No va a estar expuesta a internet. Nosotros exponemos nuestros servicios, pero nuestra aplicación, los contenedores, las funciones quedan en esta zona privada.
ZONA PÚBLICA: servicios que deben estar expuestos hacia internet. Reciben los requests directamente de los usuarios y se comunican con la capa privada donde está el backend.
DNS: nombre de dominio (platziwallet com). Le agregamos las reglas de enrutamiento. Se pueden crear a nivel de los DNS opciones de redireccionamiento (basados en el nombre de dominio).
CDN (content delivery network ): expone el servicio de forma global a través del uso de ubicaciones de borde. Ubicaciones de borde son datacenter pequeños distribuidos por el mundo sobre los cuales puedo poner el contenido estático o dinámico de la aplicación. Esto ayuda a que la experiencia de usuario sea mucho mejor.
WAT + CERTIFICADO ( seguridad). Va a ver usuarios que van a estudiar cómo toman ventaja para hacer fraude. Web Application Firework + Certificado de seguridad para agregarle reglas de seguridad a nuestra aplicación. De esta manera protegemos nuestra aplicación de ataques de denegación de servicios, sql injections, ataques de script
API GATEWAY: recibe toda la información se la manda al BALANCEADOR de aplicaciones. Detrás del balanceador podemos tener nuestro backend corriendo en Kubernetes. Este clúster de Kubernetes donde está corriendo PlatziWallet y donde están los microservicios de pagos, cobro, recarga, login, biometría, etc. Estos tienen una capa de almacenamiento (objetos, bloques y archivos).
DESPLIEGUE: para desplegar nuestro backend tenemos: Kubernetes, argo y helm



SERVERLESS (sin servidor).
DEFINICIÓN DE SERVERLESS: es la idea de que se puede ejecutar una aplicación basada en servidor sin la necesidad de administrar un servidor.
Los CLOUD PROVIDER tienen servicios SERVERLESS. El cloud provider administra el sistema operativo (parcheo, administración, escalabilidad del SO) y el usuario se enfoca en su aplicación. El cloud provider le da al usuario una FUNCIÓN y un CONTENEDOR SERVERLESS. El usuario pone la aplicación en el CONTENEDOR en esa FUNCIÓN.
RETOS de SERVERLESS:

ESCALABILIDAD: es muy grande pero está limitada por las cuotas y los límites que pone el cloud provider. Por ejemplo la FUNCIÓN puede tener un límite de concurrencia (ej: 1000 ejecuciones concurrentes por segundo). Estos límites se pueden ampliar a través de una solicitud al cloud provider por medio de un ticket de ampliación de límites. El costo tiene que ver con estos límites.
SEGURIDAD: el usuario se enfoca en proteger el código que publica en la función (comunicación de cifrado en tránsito). El usuario no se preocupa de la seguridad del servidor.
FIABILIDAD: El cloud provider se compromete con una niveles de disponibilidad por arriba del 99 % (los servicios que tienen que ver con la fiabilidad y alta disponibilidad tienen un SLA muy alto).
PAGO POR USO: por el tiempo de ejecución y la cantidad de memoria que uso para una ejecución. Ej: una FUNCIÓN se demora 200 milisegundos en tomar una imagen y convertirla en miniatura. El precio se calcula por ejecución, por consumo, cantidad de peticiones, tiempo de ejecución y cantidad de tráfico.
AHORRO de TIEMPO y DINERO: ej: on-premises a serverless. No hay ocupación en administrar o instalar servidores.
MEJORA la PRODUCTIVIDAD del DESARROLLADOR: porque los entornos actualmente en nube, los servicios, la forma de testearlos localmente, la forma de automatizar su despliegue y de probarlos es muy fácil. La agilidad para desplegar un servicio por medio de una función, teniendo el código, va a ser muy rápida (10 o 15 minutos).
COLD START (tiempo de inicio frío): tiempo para que una FUNCIÓN se “despierte”. Hay que esperar unos 2 o 3 segundos en su primera ejecución. Esto puede afectar a algunas arquitecturas cuando no se tolera ese tiempo de latencia.
TIEMPO de CÓMPUTO: Ejemplo. Hay FUNCIONES que su tiempo máximo de vida es 15 minutos y necesitamos un tiempo de ejecución de 30 minutos. FUNCIÓN limitada por un timeout.
CONECTIVIDAD: Ejemplo. Consumo de direcciones IP que hace una función dentro de una capa de red. Si es alto hay que evaluar la utilidad que tiene esa función dentro de la capa. Pues es aconsejable que esa función no se ubique dentro de una VPC o una Virtual Private Cloud dentro de la red. Sino que se ejecute fuera de ella para tener más flexibilidad.
VENDOR LOCK-IN: si queremos migrar una aplicación de AZURE a AWS lo más probable es que la tengamos que hacer de nuevo.

STREAMS: es una secuencia de eventos, mensajes o datos que pueden ser procesados una vez ocurren, los cuales pueden ser distribuidos a múltiples consumidores. Abundan en los proyectos donde la palabra clave es “data” o “real-time”.
Real-time: es cuando se puede utilizar un evento o una acción que se acabó de generar hace poco.
Es streams tiene la capacidad de recibir muchísimos eventos en paralelo (millones) y se los puede enviar a un dashboard para que los grafique y lo pueda ver un equipo de marketing, por ejemplo. De esta manera estoy utilizando un streams para aprovechar al máximo el poder del real time.
En los cloud provider estos streams son servicios completamente serverless. El streams tiene que tener la capacidad de recibir esos millones de eventos y enviarselo a un consumidor en tiempo real.
COLAS: método para retrasar el trabajo, utilizadas para desacoplar componentes de un sistema.
Ejemplo: cola para el cajero del banco. Entonces las COLAS se ubican para no saturar a un componente de la arquitectura. Ejemplo: miles de usuarios piden un certificado a la APP, la COLA en cola estas solicitudes y la aplicación lo va procesando a medida que pueda. De esta manera la APP nunca se cae.
BUCKET: estructura donde se puede almacenar una colección de OBJETOS. Estos objetos se pueden consultar. Su costo se basa en la cantidad de solicitudes y espacio utilizado. Almacenamiento por objetos. Un objeto puede ser la foto de cada usuario de la APP.
API: es una abreviatura de APPLICATION PROGRAMMING INTERFACES, son mecanismos que permiten a dos componentes de software comunicarse entre sí, mediante un conjunto de definiciones y protocolos. API REST, API HTTPS, API WebSocket, API GraphQL y todos son servicios serveless. La API es la puerta de entrada a nuestra aplicación.
DATASTORE: es una base NoSQL creada para proporcionar autoescalamiento, alto rendimiento y facilidad para el desarrollo de aplicaciones. No SQL: llave valor, de memoria, por grafos y documentales.
IDENTITY SERVICES: servicios en la nube que ayudan a implementar la administración de acceso e identidad de los usuarios a nuestras aplicaciones web o móviles. Servicios para hacer autenticación y autorización. Ejemplo para PlatziWallet: yo puedo registrarme como usuario (autenticación) pero hasta que no registre una tarjeta de crédito no voy a poder realizar un pago (autenticación).
MOTOR DE CONSULTAS: motor de consulta SQL que pueden consultar data estructurada, semiestructurada y no estructurada de diferentes fuentes de datos. Ej: PRESTO (Open Source). Query a múltiples fuentes, centralizadas y el costo es por la cantidad de data escaneada. A datos que tengamos en almacenamiento por objetos, a DB no relacionales y relacionales.
BALANCEADORES DE CARGA (de aplicaciones y de red): componente que distribuye el tráfico entre varios destinos, puede ser a nivel de aplicación, red o transporte. Recibe los requests y los distribuye entre las zonas de disponibilidad.
El balanceador de aplicaciones es el que va ser nuestro foco, porque va a trabajar en capa 7 del modelo OCI, es decir, va a balancear a nivel de HTTP y HTTPS.
El balanceador de red se enfoca en las capas 3 y 4 del modelo OCI, es decir, en balancear tráfico IP, tráfico UDP y tráfico TCP.






